/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WorkArea.java
 *
 * Created on Apr 18, 2012, 9:29:41 PM
 */
package pressdocumentation.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListSelectionModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import org.jdesktop.application.Action;
import pressdocumentation.ArticleHandler;
import pressdocumentation.ArticleListener;
import pressdocumentation.PrefsHandler;
import pressdocumentation.pojos.Article;
import pressdocumentation.pojos.Newspaper;

/**
 *
 * @author ethggy
 */
public class WorkArea extends javax.swing.JPanel implements ListSelectionListener, ComponentListener, ArticleListener {


    
    private HashMap<String, PagePartWidget> partWidgets;
    
    /** Creates new form WorkArea */
    public WorkArea() {
        initComponents();

        ArticleHandler ah = ArticleHandler.createInstance();
        ah.addListener(this);

        partWidgets = new HashMap<String, PagePartWidget>();
        initPageExtractionWidgets();
        
       

    }

    private void initPageExtractionWidgets() {
        java.awt.GridBagConstraints gridBagConstraints;
        PagePartWidget header;
        
        List<String> parts = new ArrayList<String>();
        parts.add("header");
        parts.add("date");
        parts.add("preface");
        parts.add("body");
        parts.add("upleft-component");
        parts.add("downright-component");

        int i = 0;
        for (String s : parts) {
            header = new PagePartWidget(s);
            partWidgets.put(header.getType(), header);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = i;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.insets = new java.awt.Insets(3, 5, 5, 5);
            jPanel3.add(header, gridBagConstraints);
            
            i++;
        }
                

        
        
    }
  
    private ImageIcon ii;
    private ImageIcon croppedImage;
    private SelectionArea area;
    private Article selectedArticle;
//    private List<Component> list;
//    private List<Component> titleComponents;
//    private List<Component> prefaceComponents;
//    private List<Component> bodyComponents;
    private int lastRow = 0;
//    private WebDriver driver = null;
    private int localX = -1;
    private int localY = -1;
    private int localWidth = -1;
    private int localHeight = -1;
    
/*
    public void clearUp() {
        if (driver != null) {
            driver.quit();
        }
    }

    public WebDriver getDriver() {
        return driver;
    }

    public void setDriver(WebDriver driver) {
        this.driver = driver;
    }
*/
    public void setSelectedArticle(Article a) {
        this.selectedArticle = a;
    }

    
    public void rectToDraw(int x, int y, int width, int height) {

        localX = x;
        localY = y;
        localWidth = width;
        localHeight = height;
        Logger.getLogger(SelectionArea.class.getName()).log(Level.INFO, "setLocals x " + x + " y : " + y + " width : " + width + " height : " + height);

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        setName("Form"); // NOI18N

        jSplitPane1.setDividerLocation(160);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jSplitPane2.setDividerLocation(150);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setName("jSplitPane2"); // NOI18N

        jPanel4.setName("jPanel4"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(pressdocumentation.PressDocumentationApp.class).getContext().getResourceMap(WorkArea.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jScrollPane3.setViewportView(jLabel1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(jPanel4);

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        jTextPane1.setName("jTextPane1"); // NOI18N
        jScrollPane5.setViewportView(jTextPane1);

        jSplitPane2.setLeftComponent(jScrollPane5);

        jSplitPane1.setLeftComponent(jSplitPane2);

        jPanel1.setName("jPanel1"); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(pressdocumentation.PressDocumentationApp.class).getContext().getActionMap(WorkArea.class, this);
        jButton1.setAction(actionMap.get("crop")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.GridBagLayout());
        jScrollPane4.setViewportView(jPanel3);

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jButton5.setAction(actionMap.get("textExtraction")); // NOI18N
        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton5)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setName("jScrollPane1"); // NOI18N
        jScrollPane1.setPreferredSize(new java.awt.Dimension(234, 210));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    private void updateLabel(Rectangle rectToDraw) {
//        throw new UnsupportedOperationException("Not yet implemented");
    }

    public void clearArticle() {
        try {
            localX = -1;
            localY = -1;
            localWidth = -1;
            localHeight = -1;

            if (area != null) {
                area.clear();
            }
            ii = null;
            jLabel1.setIcon(croppedImage);
            jLabel1.revalidate();
            
            StyledDocument sd = jTextPane1.getStyledDocument();
            sd.remove(0, sd.getLength());
            initPageExtractionCondition();
            
            

        } catch (BadLocationException ex) {
            Logger.getLogger(WorkArea.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }
    
    
    public void showPic(byte[] image) {
        
        ii = new ImageIcon(image);

        if (area == null) {
            area = new SelectionArea(ii, this);
            area.addComponentListener(this);

            System.out.println("area to add");
            jScrollPane1.getViewport().add(area);
        } else {
            
            //TODO to check this, if this really work
            area.setIcon(ii);
            area.revalidate();
            area.updateUI();
        }

    }

    public void showPic(Article a) {
        if (a.getFileURL() != null) {
            try {
                BufferedImage bufferedImage = ImageIO.read(new File(a.getFileURL()));
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(bufferedImage, "jpg", baos);
                baos.flush();
                byte[] imageInByte = baos.toByteArray();
                baos.close();

                showPic(imageInByte);

                Newspaper p = a.getPaper();
                rectToDraw(p.getScreenUpperLeftX(), p.getScreenUpperLeftY(), p.getScreenLowerRightX() - p.getScreenUpperLeftX(), p.getScreenLowerRightY() - p.getScreenUpperLeftY());


                //        throw new UnsupportedOperationException("Not supported yet.");
            } catch (IOException ex) {
                Logger.getLogger(WorkArea.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (area != null) {
                area.clear();
            }
            ii = null;
        }
        
    }    
    
    
    
    public void showPicSelectedArticle() {
        showPic(selectedArticle);

    }
    
    
    public void valueChanged(ListSelectionEvent e) {


        int selectedIndex = ((DefaultListSelectionModel) e.getSource()).getMinSelectionIndex();
        System.out.println("ValueChanged row : " + selectedIndex);

        if (selectedIndex != -1) {
            clearArticle();
            ArticleHandler ah = ArticleHandler.createInstance();
            if (ah.size() > 0) {
                selectedArticle = ah.getArticle(selectedIndex);
                
               
                System.out.println("ValueChanged articleSelected : " + selectedArticle.getLink());
//                initPageExtractionCondition();
                
                if (selectedArticle.getPaper() != null) {
                
                    showPic(selectedArticle);
                
                    showText(selectedArticle);
                }
                
            }
        }
    }

    public void componentResized(ComponentEvent e) {
        Logger.getLogger(WorkArea.class.getName()).log(Level.INFO, "componentResized");
        if (localX != -1) {
            Logger.getLogger(SelectionArea.class.getName()).log(Level.INFO, "areaDrawRect x " + localX + " y : " + localY + " width : " + localWidth + " height : " + localHeight);
            
            area.drawRect(localX, localY, localWidth, localHeight);

            crop();

            localX = -1;
            localY = -1;
            localWidth = -1;
            localHeight = -1;

        }
    }

    public void componentMoved(ComponentEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void componentShown(ComponentEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void componentHidden(ComponentEvent e) {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Action
    public void crop() {
        
        Image i = ii.getImage();

        BufferedImage bi = new BufferedImage(ii.getIconWidth(), ii.getIconHeight(), BufferedImage.TYPE_3BYTE_BGR);
        Graphics2D createGraphics = bi.createGraphics();

//        createGraphics.setXORMode(Color.white); //Color of line varies
        createGraphics.clearRect(area.getPreviousRectDrawn().x, area.getPreviousRectDrawn().y, area.getPreviousRectDrawn().width - 1, area.getPreviousRectDrawn().height - 1);
        Logger.getLogger(WorkArea.class.getName()).log(Level.INFO, "previous x : " + area.getPreviousRectDrawn().x + " y : " + area.getPreviousRectDrawn().y);
        Logger.getLogger(WorkArea.class.getName()).log(Level.INFO, "current x : " + area.getCurrentRect().x + " y : " + area.getCurrentRect().y);
        Logger.getLogger(WorkArea.class.getName()).log(Level.INFO, "recttodraw x : " + area.getRectToDraw().x + " y : " + area.getRectToDraw().y);
//        createGraphics.setXORMode(Color.black); //Color of line varies

        createGraphics.drawImage(i, null, null);

        BufferedImage croppedBufferedImage = bi.getSubimage(area.getRectToDraw().x, area.getRectToDraw().y, area.getRectToDraw().width, area.getRectToDraw().height);

        PrefsHandler pf = PrefsHandler.getInstance();

        Newspaper paper = selectedArticle.getPaper();
        paper.setScreenUpperLeftX(area.getRectToDraw().x);
        paper.setScreenUpperLeftY(area.getRectToDraw().y);
        paper.setScreenLowerRightX(area.getRectToDraw().x + (int) area.getRectToDraw().getWidth());
        paper.setScreenLowerRightY(area.getRectToDraw().y + (int) area.getRectToDraw().getHeight());

        pf.addPress(paper);

        croppedImage = new ImageIcon();
        croppedImage.setImage(croppedBufferedImage);
        
        
        PrefsHandler ph = PrefsHandler.getInstance();
        
        File f = new File(ph.getDefaultDocumentDirectory());
        f = f.getParentFile();
        
        String directory = f.toString();
        
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyMMdd");        
        SimpleDateFormat hm = new SimpleDateFormat("HHmmss");
        StringBuilder sb = new StringBuilder(directory);
        sb.append("\\" + sdf.format(new Date()) + "\\");
        String dirStr = sb.toString();
        sb.append(hm.format(new Date()));
        sb.append("_crop.jpg");

        selectedArticle.setCropURL(sb.toString());

        
        try {
            ImageIO.write(croppedBufferedImage, "jpg", new File(sb.toString()));
        } catch (IOException ex) {
            Logger.getLogger(WorkArea.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        jLabel1.setIcon(croppedImage);


        jLabel1.revalidate();

        ArticleHandler ah = ArticleHandler.createInstance();
        ah.notifyListeners(ArticleListener.IMAGE_CROPPED, selectedArticle);
        
        
        
//        area.reset();



    }
    
    
    
    
    public void initPageExtractionCondition() {
        
        if (selectedArticle == null) {
            return ;
        }
        
        Newspaper newspaper = selectedArticle.getPaper();
        
        if (newspaper != null) {

            for (Iterator<PagePartWidget> it = partWidgets.values().iterator(); it.hasNext();) {
                PagePartWidget pagePartWidget = it.next();

                String type = pagePartWidget.getType();
                int length = (newspaper.getCondition(type) == null ? 0 : newspaper.getCondition(type).length());

                if (length > 0) {
                    String headerCondition = newspaper.getCondition(type);
                    Logger.getLogger(WorkArea.class.getName()).log(Level.INFO, "initPageExtractionCondition type " + type + " value : " + headerCondition);

                    pagePartWidget.setPageElementDescriptor(headerCondition);



                } else {
                    pagePartWidget.reset();
//                PageElementDescriptor ped = new PageElementDescriptor();
//                pagePartWidget.addPageElementDescriptor(ped);
                }

            }
        }

        
    }

    private void storePageExtractionCondition() {

        Newspaper newspaper = selectedArticle.getPaper();

        newspaper.resetDescriptors();

        for (Iterator<PagePartWidget> it = partWidgets.values().iterator(); it.hasNext();) {
            PagePartWidget pagePartWidget = it.next();
            String valueStr = pagePartWidget.getText();

            newspaper.addCondition(pagePartWidget.getType(), valueStr);

            
        }

        PrefsHandler handler = PrefsHandler.getInstance();
        handler.addPress(newspaper);

        
        
        
    }

    
    
    @Action
    public void textExtraction() {

        storePageExtractionCondition();
        ArticleHandler ah = ArticleHandler.createInstance();
        ah.notifyListeners(ArticleListener.TEXT_EXTRACTION_TO_MAKE, selectedArticle);


    }

    public void articleModified(int type, Article a) {
        if (type == ArticleListener.IMAGE_DOWNLOADED) {
            if (selectedArticle.equals(a)) {
                Logger.getLogger(WorkArea.class.getName()).log(Level.INFO, "Image to show");

//                showPic(a);
            }
        } else if (type == ArticleListener.TEXT_EXTRACTED) {
            if (selectedArticle.equals(a)) {
                Logger.getLogger(WorkArea.class.getName()).log(Level.INFO, "Text to show");
                // better crop parameters available here
                showPic(a);
                showText(a);
            }
        } else if (type == ArticleListener.NEWSPAPER_MODIFIED) {
            if (selectedArticle.equals(a)) {
                Logger.getLogger(WorkArea.class.getName()).log(Level.INFO, "Define the extraction parameter");
                initPageExtractionCondition();
            }
        }
    }

    private void showText(Article a) {
        
        if ((a.getTitle() == null) || (a.getTitle().isEmpty())) {
            return ;
        }
        
        
        List<String> parts = new ArrayList<String>();
        parts.add("header");
        parts.add("preface");
        parts.add("body");


        for (String s : parts) {


            try {
                StyledDocument sd = jTextPane1.getStyledDocument();

                Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);
                Style regular = sd.addStyle("regular", def);

                Style header = sd.addStyle(s, regular);

                if (!s.equalsIgnoreCase("body")) {
                    StyleConstants.setBold(header, true);
                } else {
                    StyleConstants.setBold(header, false);

                }

                if (s.equalsIgnoreCase("header")) {
                    StyleConstants.setFontSize(header, 14);
                } else {
                    StyleConstants.setFontSize(header, 12);

                }
//                    headerString.appendCodePoint(13);
//                    headerString.appendCodePoint(13);


                if (s.equalsIgnoreCase("header")) {
                    sd.insertString(sd.getLength(), a.getTitle(), header);
                    
                } else if (s.equalsIgnoreCase("preface")) {
                    sd.insertString(sd.getLength(), a.getPreface(), header);
                } else if (s.equalsIgnoreCase("body")) {
                    sd.insertString(sd.getLength(), a.getBody(), header);
                    
                }

                sd.insertString(sd.getLength(), "\n", header);
                sd.insertString(sd.getLength(), "\n", header);

//                    sd.putProperty(def, parts);


            } catch (BadLocationException ex) {
                Logger.getLogger(WorkArea.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        
        
    }
    
    

    private class SelectionArea extends JLabel {

        Rectangle currentRect = null;
        Rectangle rectToDraw = null;
        Rectangle previousRectDrawn = new Rectangle();
        WorkArea controller;

        public SelectionArea(ImageIcon image, WorkArea controller) {
            
            super(image); //This component displays an image.
            this.controller = controller;
            setOpaque(true);
            setMinimumSize(new Dimension(10, 10)); //don't hog space

            MyListener myListener = new MyListener();
            addMouseListener(myListener);
            addMouseMotionListener(myListener);
        }

        public Rectangle getRectToDraw() {
            return rectToDraw;
        }

        public Rectangle getCurrentRect() {
            return currentRect;
        }

        public Rectangle getPreviousRectDrawn() {
            return previousRectDrawn;
        }

        public void drawRect(int x, int y, int width, int height) {

            Logger.getLogger(SelectionArea.class.getName()).log(Level.INFO, "drawRect x " + x + " y : " + y + " width : " + width + " height : " + height);
            if (rectToDraw != null) {
                Logger.getLogger(WorkArea.class.getName()).log(Level.INFO, "update previous from recttodraw x : " + getRectToDraw().x + " y : " + getRectToDraw().y);
                
                previousRectDrawn.setBounds(rectToDraw.x, rectToDraw.y,
                        rectToDraw.width, rectToDraw.height);
                rectToDraw.setBounds(x, y, width, height);
            } else {
                rectToDraw = new Rectangle(x, y, width, height);
//                repaint();
            }

            updateSize(x, y, width, height);
        }
        public void clear() {
            
            setIcon(null);
            reset();
            repaint();
        }

        private class MyListener extends MouseInputAdapter {

            public void mousePressed(MouseEvent e) {
                int x = e.getX();
                int y = e.getY();
                currentRect = new Rectangle(x, y, 0, 0);
                updateDrawableRect(getWidth(), getHeight());
                repaint();
            }

            public void mouseDragged(MouseEvent e) {
                updateSize(e);
            }

            public void mouseReleased(MouseEvent e) {
                updateSize(e);
            }

            /*
             * Update the size of the current rectangle and call repaint.
             * Because currentRect always has the same origin, translate it if
             * the width or height is negative.
             * 
             * For efficiency (though that isn't an issue for this program),
             * specify the painting region using arguments to the repaint()
             * call.
             *  
             */
            void updateSize(MouseEvent e) {
                int x = e.getX();
                int y = e.getY();

                SelectionArea.this.updateSize(x, y, x - currentRect.x, y - currentRect.y);

            }
        }

        public void updateSize(int x, int y, int width, int height) {
            Logger.getLogger(SelectionArea.class.getName()).log(Level.INFO, "x " + x + " y : " + y + " width : " + width + " height : " + height);
            if (currentRect == null) {
                currentRect = new Rectangle(x, y, 0, 0);
                Logger.getLogger(SelectionArea.class.getName()).log(Level.INFO, "init currentRect");
            }

            currentRect.setSize(width, height);

            updateDrawableRect(getWidth(), getHeight());
            Rectangle totalRepaint = rectToDraw.union(previousRectDrawn);
            repaint(totalRepaint.x, totalRepaint.y, totalRepaint.width,
                    totalRepaint.height);

        }

        protected void paintComponent(Graphics g) {
            super.paintComponent(g); //paints the background and image

            //If currentRect exists, paint a box on top.
            if (currentRect != null) {
                //Draw a rectangle on top of the image.
                g.setXORMode(Color.white); //Color of line varies
                //depending on image colors
                g.drawRect(rectToDraw.x, rectToDraw.y, rectToDraw.width - 1,
                        rectToDraw.height - 1);

                controller.updateLabel(rectToDraw);
            }
        }

        public void reset() {
            rectToDraw.setBounds(0, 0, 0, 0);
            currentRect = null;
            repaint();
        }

        private void updateDrawableRect(int compWidth, int compHeight) {


            Logger.getLogger(SelectionArea.class.getName()).log(Level.INFO, "compWidth : " + compWidth + " compHeight : " + compHeight);

            int x = currentRect.x;
            int y = currentRect.y;
            int width = currentRect.width;
            int height = currentRect.height;
            Logger.getLogger(SelectionArea.class.getName()).log(Level.INFO, "x " + x + " y : " + y + " width : " + width + " height : " + height);

            //Make the width and height positive, if necessary.
            if (width < 0) {
                width = 0 - width;
                x = x - width + 1;
                if (x < 0) {
                    width += x;
                    x = 0;
                }
            }
            if (height < 0) {
                height = 0 - height;
                y = y - height + 1;
                if (y < 0) {
                    height += y;
                    y = 0;
                }
            }

            //The rectangle shouldn't extend past the drawing area.
            if ((x + width) > compWidth) {
                width = compWidth - x;
            }
            if ((y + height) > compHeight) {
                height = compHeight - y;
            }
            Logger.getLogger(SelectionArea.class.getName()).log(Level.INFO, "x " + x + " y : " + y + " width : " + width + " height : " + height);

            //Update rectToDraw after saving old value.
            if (rectToDraw != null) {
                previousRectDrawn.setBounds(rectToDraw.x, rectToDraw.y,
                        rectToDraw.width, rectToDraw.height);
                rectToDraw.setBounds(x, y, width, height);
            } else {
                rectToDraw = new Rectangle(x, y, width, height);
            }
        }
    }
}
